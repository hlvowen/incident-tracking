// <auto-generated />
using System;
using MILS.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MILS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MILS.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImprovementProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceCc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImprovementProcess = "Q-4-06-XX-00",
                            LongLabel = "CHECK LIST Evaluation des impacts CC",
                            ShortLabel = "Management"
                        },
                        new
                        {
                            Id = 2,
                            ImprovementProcess = "Q-4-06-XX-00",
                            LongLabel = "CHECK LIST Evaluation des impacts CC CONCEPTION",
                            ShortLabel = "Conception"
                        });
                });

            modelBuilder.Entity("MILS.Domain.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TrackingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TrackingId");

                    b.ToTable("Incident", "dbo");
                });

            modelBuilder.Entity("MILS.Domain.IncidentLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("LineId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("No")
                        .HasColumnType("bit");

                    b.Property<bool>("ToEvalute")
                        .HasColumnType("bit");

                    b.Property<bool>("Yes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LineId");

                    b.ToTable("IncidentLine", "dbo");
                });

            modelBuilder.Entity("MILS.Domain.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Line", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Label = "Modification administrative (nom, entité, adresse)"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Label = "Modification des certificats (ajout/retrait d'une activité, modification, libellé)"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Label = "Déménagement"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Label = "Ajout de nouveaux sites"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Label = "Transfert/internalisation d'activités"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Label = "Internalisation d'une activité"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Label = "Changement de responsabilités au niveau des rôles règlementaires ou de la direction générale"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Label = "Modification des infrastructures"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Label = "Formation"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Label = "Destination / Utilisation du produit"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Label = "Caractéristiques techniques du dispositif"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Label = "Performance du produit"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Label = "Plan de contrôle"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Label = "Plaque de marque"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Label = "Etiquetage"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Label = "Gestion des alarmes"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Label = "Modification de composant"
                        });
                });

            modelBuilder.Entity("MILS.Domain.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tracking", "dbo");
                });

            modelBuilder.Entity("MILS.Domain.Incident", b =>
                {
                    b.HasOne("MILS.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MILS.Domain.Tracking", "Tracking")
                        .WithMany("Incidents")
                        .HasForeignKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("MILS.Domain.IncidentLine", b =>
                {
                    b.HasOne("MILS.Domain.Incident", "Incident")
                        .WithMany("IncidentLines")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MILS.Domain.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("MILS.Domain.Line", b =>
                {
                    b.HasOne("MILS.Domain.Category", "Category")
                        .WithMany("Lines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MILS.Domain.Category", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("MILS.Domain.Incident", b =>
                {
                    b.Navigation("IncidentLines");
                });

            modelBuilder.Entity("MILS.Domain.Tracking", b =>
                {
                    b.Navigation("Incidents");
                });
#pragma warning restore 612, 618
        }
    }
}
